{"name":"Cool Helpers","tagline":"Cool Helpers is a Handlebars.js helpers compilation with AMD support.","body":"#Index\r\n\r\n**Namespaces**\r\n\r\n* [comparison](#comparison)\r\n  * [comparison.contains(str, pattern)](#comparison.contains)\r\n  * [comparison.and(a, b)](#comparison.and)\r\n  * [comparison.gt(value, test)](#comparison.gt)\r\n  * [comparison.gte(value, test)](#comparison.gte)\r\n  * [comparison.is(value, test)](#comparison.is)\r\n  * [comparison.isnt(value, test)](#comparison.isnt)\r\n  * [comparison.lt(value, test)](#comparison.lt)\r\n  * [comparison.lte(value, test)](#comparison.lte)\r\n  * [comparison.or(value, test)](#comparison.or)\r\n  * [comparison.ifNth(value, test)](#comparison.ifNth)\r\n  * [comparison.compare(left, operator, right, options)](#comparison.compare)\r\n  * [comparison.if_eq(context, options)](#comparison.if_eq)\r\n  * [comparison.unless_eq(context, options)](#comparison.unless_eq)\r\n  * [comparison.if_gt(context, options)](#comparison.if_gt)\r\n  * [comparison.unless_gt(context, options)](#comparison.unless_gt)\r\n  * [comparison.if_lt(context, options)](#comparison.if_lt)\r\n  * [comparison.unless_lt(context, options)](#comparison.unless_lt)\r\n  * [comparison.if_gteq(context, options)](#comparison.if_gteq)\r\n  * [comparison.unless_gteq(context, options)](#comparison.unless_gteq)\r\n  * [comparison.if_lteq(context, options)](#comparison.if_lteq)\r\n  * [comparison.unless_lteq(context, options)](#comparison.unless_lteq)\r\n* [comparison](#comparison)\r\n  * [comparison.contains(str, pattern)](#comparison.contains)\r\n  * [comparison.and(a, b)](#comparison.and)\r\n  * [comparison.gt(value, test)](#comparison.gt)\r\n  * [comparison.gte(value, test)](#comparison.gte)\r\n  * [comparison.is(value, test)](#comparison.is)\r\n  * [comparison.isnt(value, test)](#comparison.isnt)\r\n  * [comparison.lt(value, test)](#comparison.lt)\r\n  * [comparison.lte(value, test)](#comparison.lte)\r\n  * [comparison.or(value, test)](#comparison.or)\r\n  * [comparison.ifNth(value, test)](#comparison.ifNth)\r\n  * [comparison.compare(left, operator, right, options)](#comparison.compare)\r\n  * [comparison.if_eq(context, options)](#comparison.if_eq)\r\n  * [comparison.unless_eq(context, options)](#comparison.unless_eq)\r\n  * [comparison.if_gt(context, options)](#comparison.if_gt)\r\n  * [comparison.unless_gt(context, options)](#comparison.unless_gt)\r\n  * [comparison.if_lt(context, options)](#comparison.if_lt)\r\n  * [comparison.unless_lt(context, options)](#comparison.unless_lt)\r\n  * [comparison.if_gteq(context, options)](#comparison.if_gteq)\r\n  * [comparison.unless_gteq(context, options)](#comparison.unless_gteq)\r\n  * [comparison.if_lteq(context, options)](#comparison.if_lteq)\r\n  * [comparison.unless_lteq(context, options)](#comparison.unless_lteq)\r\n* [date](#date)\r\n  * [date.prettifyDate(timestamp, format, errorMsg)](#date.prettifyDate)\r\n* [math](#math)\r\n  * [math.add(value, addition)](#math.add)\r\n  * [math.subtract(value, substraction)](#math.subtract)\r\n  * [math.divide(value, divisor)](#math.divide)\r\n  * [math.multiply(value, multiplier)](#math.multiply)\r\n  * [math.floor(value)](#math.floor)\r\n  * [math.ceil(value)](#math.ceil)\r\n  * [math.round(value)](#math.round)\r\n  * [math.sum()](#math.sum)\r\n \r\n<a name=\"comparison\"></a>\r\n#comparison\r\nCommon helpers set\r\n\r\n**Members**\r\n\r\n* [comparison](#comparison)\r\n  * [comparison.contains(str, pattern)](#comparison.contains)\r\n  * [comparison.and(a, b)](#comparison.and)\r\n  * [comparison.gt(value, test)](#comparison.gt)\r\n  * [comparison.gte(value, test)](#comparison.gte)\r\n  * [comparison.is(value, test)](#comparison.is)\r\n  * [comparison.isnt(value, test)](#comparison.isnt)\r\n  * [comparison.lt(value, test)](#comparison.lt)\r\n  * [comparison.lte(value, test)](#comparison.lte)\r\n  * [comparison.or(value, test)](#comparison.or)\r\n  * [comparison.ifNth(value, test)](#comparison.ifNth)\r\n  * [comparison.compare(left, operator, right, options)](#comparison.compare)\r\n  * [comparison.if_eq(context, options)](#comparison.if_eq)\r\n  * [comparison.unless_eq(context, options)](#comparison.unless_eq)\r\n  * [comparison.if_gt(context, options)](#comparison.if_gt)\r\n  * [comparison.unless_gt(context, options)](#comparison.unless_gt)\r\n  * [comparison.if_lt(context, options)](#comparison.if_lt)\r\n  * [comparison.unless_lt(context, options)](#comparison.unless_lt)\r\n  * [comparison.if_gteq(context, options)](#comparison.if_gteq)\r\n  * [comparison.unless_gteq(context, options)](#comparison.unless_gteq)\r\n  * [comparison.if_lteq(context, options)](#comparison.if_lteq)\r\n  * [comparison.unless_lteq(context, options)](#comparison.unless_lteq)\r\n\r\n<a name=\"comparison.contains\"></a>\r\n##comparison.contains(str, pattern)\r\nConditionally render a block if string matches pattern\r\n\r\n**Params**\r\n\r\n- str `string` - Value to be compared with pattern  \r\n- pattern `string` - Patter which value will be compared to  \r\n\r\n<a name=\"comparison.and\"></a>\r\n##comparison.and(a, b)\r\nConditionally render a block if both a and b properties exists and are not null or undefined\r\n\r\n**Params**\r\n\r\n- a `primitive` - first property  \r\n- b `primitive` - second property  \r\n\r\n<a name=\"comparison.gt\"></a>\r\n##comparison.gt(value, test)\r\nConditionally render a block if value > test\r\n\r\n**Params**\r\n\r\n- value `primitive` - value to test  \r\n- test `primitive` - element with first value will be compared to  \r\n\r\n<a name=\"comparison.gte\"></a>\r\n##comparison.gte(value, test)\r\nConditionally render a block if value >= test\r\n\r\n**Params**\r\n\r\n- value `primitive` - value to test  \r\n- test `primitive` - element with first value will be compared to  \r\n\r\n<a name=\"comparison.is\"></a>\r\n##comparison.is(value, test)\r\nConditionally render a block if value === test\r\n\r\n**Params**\r\n\r\n- value `primitive` - value to test  \r\n- test `primitive` - element with first value will be compared to  \r\n\r\n<a name=\"comparison.isnt\"></a>\r\n##comparison.isnt(value, test)\r\nConditionally render a block if value !== test\r\n\r\n**Params**\r\n\r\n- value `primitive` - value to test  \r\n- test `primitive` - element with first value will be compared to  \r\n\r\n<a name=\"comparison.lt\"></a>\r\n##comparison.lt(value, test)\r\nConditionally render a block if value < test\r\n\r\n**Params**\r\n\r\n- value `primitive` - value to test  \r\n- test `primitive` - element with first value will be compared to  \r\n\r\n<a name=\"comparison.lte\"></a>\r\n##comparison.lte(value, test)\r\nConditionally render a block if value <= test\r\n\r\n**Params**\r\n\r\n- value `primitive` - value to test  \r\n- test `primitive` - element with first value will be compared to  \r\n\r\n<a name=\"comparison.or\"></a>\r\n##comparison.or(value, test)\r\nConditionally render a block if a || b\r\n\r\n**Params**\r\n\r\n- value `primitive` - value to test  \r\n- test `primitive` - element with first value will be compared to  \r\n\r\n<a name=\"comparison.ifNth\"></a>\r\n##comparison.ifNth(value, test)\r\nConditionally render a block if nr%v === 0\r\n\r\n**Params**\r\n\r\n- value `primitive` - value to test  \r\n- test `primitive` - eleme  \r\n\r\n<a name=\"comparison.compare\"></a>\r\n##comparison.compare(left, operator, right, options)\r\n{{#compare}}...{{/compare}}\r\n\r\n**Params**\r\n\r\n- left  - value  \r\n- operator  - The operator, must be between quotes \">\", \"=\", \"<=\", etc...  \r\n- right  - value  \r\n- options  - option object sent by handlebars  \r\n\r\n**Returns**: `String` - formatted html  \r\n<a name=\"comparison.if_eq\"></a>\r\n##comparison.if_eq(context, options)\r\n{{if_eq}}\r\n\r\n**Params**\r\n\r\n- context `type` - [description]  \r\n- options `type` - [description]  \r\n\r\n**Returns**: `type` - [description]  \r\n<a name=\"comparison.unless_eq\"></a>\r\n##comparison.unless_eq(context, options)\r\n{{unless_eq}}\r\n\r\n**Params**\r\n\r\n- context `type` - [description]  \r\n- options `type` - [description]  \r\n\r\n**Returns**: `type` - [description]  \r\n<a name=\"comparison.if_gt\"></a>\r\n##comparison.if_gt(context, options)\r\n{{if_gt}}\r\n\r\n**Params**\r\n\r\n- context `type` - [description]  \r\n- options `type` - [description]  \r\n\r\n**Returns**: `type` - [description]  \r\n<a name=\"comparison.unless_gt\"></a>\r\n##comparison.unless_gt(context, options)\r\n{{unless_gt}}\r\n\r\n**Params**\r\n\r\n- context `type` - [description]  \r\n- options `type` - [description]  \r\n\r\n**Returns**: `type` - [description]  \r\n<a name=\"comparison.if_lt\"></a>\r\n##comparison.if_lt(context, options)\r\n{{if_lt}}\r\n\r\n**Params**\r\n\r\n- context `type` - [description]  \r\n- options `type` - [description]  \r\n\r\n**Returns**: `type` - [description]  \r\n<a name=\"comparison.unless_lt\"></a>\r\n##comparison.unless_lt(context, options)\r\n{{unless_lt}}\r\n\r\n**Params**\r\n\r\n- context `type` - [description]  \r\n- options `type` - [description]  \r\n\r\n**Returns**: `type` - [description]  \r\n<a name=\"comparison.if_gteq\"></a>\r\n##comparison.if_gteq(context, options)\r\n{{if_gteq}}\r\n\r\n**Params**\r\n\r\n- context `type` - [description]  \r\n- options `type` - [description]  \r\n\r\n**Returns**: `type` - [description]  \r\n<a name=\"comparison.unless_gteq\"></a>\r\n##comparison.unless_gteq(context, options)\r\n{{unless_gteq}}\r\n\r\n**Params**\r\n\r\n- context `type` - [description]  \r\n- options `type` - [description]  \r\n\r\n**Returns**: `type` - [description]  \r\n<a name=\"comparison.if_lteq\"></a>\r\n##comparison.if_lteq(context, options)\r\n{{if_lteq}}\r\n\r\n**Params**\r\n\r\n- context `type` - [description]  \r\n- options `type` - [description]  \r\n\r\n**Returns**: `type` - [description]  \r\n<a name=\"comparison.unless_lteq\"></a>\r\n##comparison.unless_lteq(context, options)\r\n{{unless_lteq}}\r\n\r\n**Params**\r\n\r\n- context `type` - [description]  \r\n- options `type` - [description]  \r\n\r\n**Returns**: `type` - [description]  \r\n<a name=\"comparison\"></a>\r\n#comparison\r\nComparsion helpers set\r\n\r\n**Members**\r\n\r\n* [comparison](#comparison)\r\n  * [comparison.contains(str, pattern)](#comparison.contains)\r\n  * [comparison.and(a, b)](#comparison.and)\r\n  * [comparison.gt(value, test)](#comparison.gt)\r\n  * [comparison.gte(value, test)](#comparison.gte)\r\n  * [comparison.is(value, test)](#comparison.is)\r\n  * [comparison.isnt(value, test)](#comparison.isnt)\r\n  * [comparison.lt(value, test)](#comparison.lt)\r\n  * [comparison.lte(value, test)](#comparison.lte)\r\n  * [comparison.or(value, test)](#comparison.or)\r\n  * [comparison.ifNth(value, test)](#comparison.ifNth)\r\n  * [comparison.compare(left, operator, right, options)](#comparison.compare)\r\n  * [comparison.if_eq(context, options)](#comparison.if_eq)\r\n  * [comparison.unless_eq(context, options)](#comparison.unless_eq)\r\n  * [comparison.if_gt(context, options)](#comparison.if_gt)\r\n  * [comparison.unless_gt(context, options)](#comparison.unless_gt)\r\n  * [comparison.if_lt(context, options)](#comparison.if_lt)\r\n  * [comparison.unless_lt(context, options)](#comparison.unless_lt)\r\n  * [comparison.if_gteq(context, options)](#comparison.if_gteq)\r\n  * [comparison.unless_gteq(context, options)](#comparison.unless_gteq)\r\n  * [comparison.if_lteq(context, options)](#comparison.if_lteq)\r\n  * [comparison.unless_lteq(context, options)](#comparison.unless_lteq)\r\n\r\n<a name=\"comparison.contains\"></a>\r\n##comparison.contains(str, pattern)\r\nConditionally render a block if string matches pattern\r\n\r\n**Params**\r\n\r\n- str `string` - Value to be compared with pattern  \r\n- pattern `string` - Patter which value will be compared to  \r\n\r\n<a name=\"comparison.and\"></a>\r\n##comparison.and(a, b)\r\nConditionally render a block if both a and b properties exists and are not null or undefined\r\n\r\n**Params**\r\n\r\n- a `primitive` - first property  \r\n- b `primitive` - second property  \r\n\r\n<a name=\"comparison.gt\"></a>\r\n##comparison.gt(value, test)\r\nConditionally render a block if value > test\r\n\r\n**Params**\r\n\r\n- value `primitive` - value to test  \r\n- test `primitive` - element with first value will be compared to  \r\n\r\n<a name=\"comparison.gte\"></a>\r\n##comparison.gte(value, test)\r\nConditionally render a block if value >= test\r\n\r\n**Params**\r\n\r\n- value `primitive` - value to test  \r\n- test `primitive` - element with first value will be compared to  \r\n\r\n<a name=\"comparison.is\"></a>\r\n##comparison.is(value, test)\r\nConditionally render a block if value === test\r\n\r\n**Params**\r\n\r\n- value `primitive` - value to test  \r\n- test `primitive` - element with first value will be compared to  \r\n\r\n<a name=\"comparison.isnt\"></a>\r\n##comparison.isnt(value, test)\r\nConditionally render a block if value !== test\r\n\r\n**Params**\r\n\r\n- value `primitive` - value to test  \r\n- test `primitive` - element with first value will be compared to  \r\n\r\n<a name=\"comparison.lt\"></a>\r\n##comparison.lt(value, test)\r\nConditionally render a block if value < test\r\n\r\n**Params**\r\n\r\n- value `primitive` - value to test  \r\n- test `primitive` - element with first value will be compared to  \r\n\r\n<a name=\"comparison.lte\"></a>\r\n##comparison.lte(value, test)\r\nConditionally render a block if value <= test\r\n\r\n**Params**\r\n\r\n- value `primitive` - value to test  \r\n- test `primitive` - element with first value will be compared to  \r\n\r\n<a name=\"comparison.or\"></a>\r\n##comparison.or(value, test)\r\nConditionally render a block if a || b\r\n\r\n**Params**\r\n\r\n- value `primitive` - value to test  \r\n- test `primitive` - element with first value will be compared to  \r\n\r\n<a name=\"comparison.ifNth\"></a>\r\n##comparison.ifNth(value, test)\r\nConditionally render a block if nr%v === 0\r\n\r\n**Params**\r\n\r\n- value `primitive` - value to test  \r\n- test `primitive` - eleme  \r\n\r\n<a name=\"comparison.compare\"></a>\r\n##comparison.compare(left, operator, right, options)\r\n{{#compare}}...{{/compare}}\r\n\r\n**Params**\r\n\r\n- left  - value  \r\n- operator  - The operator, must be between quotes \">\", \"=\", \"<=\", etc...  \r\n- right  - value  \r\n- options  - option object sent by handlebars  \r\n\r\n**Returns**: `String` - formatted html  \r\n<a name=\"comparison.if_eq\"></a>\r\n##comparison.if_eq(context, options)\r\n{{if_eq}}\r\n\r\n**Params**\r\n\r\n- context `type` - [description]  \r\n- options `type` - [description]  \r\n\r\n**Returns**: `type` - [description]  \r\n<a name=\"comparison.unless_eq\"></a>\r\n##comparison.unless_eq(context, options)\r\n{{unless_eq}}\r\n\r\n**Params**\r\n\r\n- context `type` - [description]  \r\n- options `type` - [description]  \r\n\r\n**Returns**: `type` - [description]  \r\n<a name=\"comparison.if_gt\"></a>\r\n##comparison.if_gt(context, options)\r\n{{if_gt}}\r\n\r\n**Params**\r\n\r\n- context `type` - [description]  \r\n- options `type` - [description]  \r\n\r\n**Returns**: `type` - [description]  \r\n<a name=\"comparison.unless_gt\"></a>\r\n##comparison.unless_gt(context, options)\r\n{{unless_gt}}\r\n\r\n**Params**\r\n\r\n- context `type` - [description]  \r\n- options `type` - [description]  \r\n\r\n**Returns**: `type` - [description]  \r\n<a name=\"comparison.if_lt\"></a>\r\n##comparison.if_lt(context, options)\r\n{{if_lt}}\r\n\r\n**Params**\r\n\r\n- context `type` - [description]  \r\n- options `type` - [description]  \r\n\r\n**Returns**: `type` - [description]  \r\n<a name=\"comparison.unless_lt\"></a>\r\n##comparison.unless_lt(context, options)\r\n{{unless_lt}}\r\n\r\n**Params**\r\n\r\n- context `type` - [description]  \r\n- options `type` - [description]  \r\n\r\n**Returns**: `type` - [description]  \r\n<a name=\"comparison.if_gteq\"></a>\r\n##comparison.if_gteq(context, options)\r\n{{if_gteq}}\r\n\r\n**Params**\r\n\r\n- context `type` - [description]  \r\n- options `type` - [description]  \r\n\r\n**Returns**: `type` - [description]  \r\n<a name=\"comparison.unless_gteq\"></a>\r\n##comparison.unless_gteq(context, options)\r\n{{unless_gteq}}\r\n\r\n**Params**\r\n\r\n- context `type` - [description]  \r\n- options `type` - [description]  \r\n\r\n**Returns**: `type` - [description]  \r\n<a name=\"comparison.if_lteq\"></a>\r\n##comparison.if_lteq(context, options)\r\n{{if_lteq}}\r\n\r\n**Params**\r\n\r\n- context `type` - [description]  \r\n- options `type` - [description]  \r\n\r\n**Returns**: `type` - [description]  \r\n<a name=\"comparison.unless_lteq\"></a>\r\n##comparison.unless_lteq(context, options)\r\n{{unless_lteq}}\r\n\r\n**Params**\r\n\r\n- context `type` - [description]  \r\n- options `type` - [description]  \r\n\r\n**Returns**: `type` - [description]  \r\n<a name=\"date\"></a>\r\n#date\r\nDate helpers set\r\n\r\n**Members**\r\n\r\n* [date](#date)\r\n  * [date.prettifyDate(timestamp, format, errorMsg)](#date.prettifyDate)\r\n\r\n<a name=\"date.prettifyDate\"></a>\r\n##date.prettifyDate(timestamp, format, errorMsg)\r\n[prettifyDate description]\r\n\r\n**Params**\r\n\r\n- timestamp `timestamp` - Date in timestamp format  \r\n- format `string` - Date format  \r\n- errorMsg `string` - Error message key  \r\n\r\n<a name=\"math\"></a>\r\n#math\r\nMath helpers set\r\n\r\n**Members**\r\n\r\n* [math](#math)\r\n  * [math.add(value, addition)](#math.add)\r\n  * [math.subtract(value, substraction)](#math.subtract)\r\n  * [math.divide(value, divisor)](#math.divide)\r\n  * [math.multiply(value, multiplier)](#math.multiply)\r\n  * [math.floor(value)](#math.floor)\r\n  * [math.ceil(value)](#math.ceil)\r\n  * [math.round(value)](#math.round)\r\n  * [math.sum()](#math.sum)\r\n\r\n<a name=\"math.add\"></a>\r\n##math.add(value, addition)\r\nReturns value + addition\r\n\r\n**Params**\r\n\r\n- value `number` - [description]  \r\n- addition `number` - [description]  \r\n\r\n<a name=\"math.subtract\"></a>\r\n##math.subtract(value, substraction)\r\nReturns value - substraction\r\n\r\n**Params**\r\n\r\n- value `number` - [description]  \r\n- substraction `number` - [description]  \r\n\r\n<a name=\"math.divide\"></a>\r\n##math.divide(value, divisor)\r\nReturns value % divisor\r\n\r\n**Params**\r\n\r\n- value `number` - [description]  \r\n- divisor `number` - [description]  \r\n\r\n<a name=\"math.multiply\"></a>\r\n##math.multiply(value, multiplier)\r\nReturns value * multiplier\r\n\r\n**Params**\r\n\r\n- value `number` - [description]  \r\n- multiplier `number` - [description]  \r\n\r\n<a name=\"math.floor\"></a>\r\n##math.floor(value)\r\nReturns Math.floor(value)\r\n\r\n**Params**\r\n\r\n- value `number` - [description]  \r\n\r\n<a name=\"math.ceil\"></a>\r\n##math.ceil(value)\r\nReturns Math.celi(value)\r\n\r\n**Params**\r\n\r\n- value `number` - [description]  \r\n\r\n<a name=\"math.round\"></a>\r\n##math.round(value)\r\nReturns Math.round(value)\r\n\r\n**Params**\r\n\r\n- value `number` - [description]  \r\n\r\n<a name=\"math.sum\"></a>\r\n##math.sum()\r\nReturns sum of each argument\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}